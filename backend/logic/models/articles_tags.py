from sqlmodel import SQLModel, Field, Relationship


from sqlmodel import SQLModel, Field, Relationship
from typing import Optional

class TagBase(SQLModel):
    """
    Base model for tags, sections, and newsletters.

    Attributes:
        name (str): Unique name for the tag (max 20 characters), indexed for fast search.
        description (Optional[str]): Optional description providing additional context (max 225 characters).
    """
    name: str = Field(unique=True, index=True, max_length=20)
    description: str | None = Field(max_length=225)


class Section(TagBase, table=True):
    """
    Database model representing a section where articles are grouped.

    Inherits:
        TagBase: Provides 'name' and 'description' fields.

    Attributes:
        section_id (Optional[int]): Primary key identifier for the section (autogenerated if not provided).

    Relationships:
        article (Article): One-to-many relationship to articles linked to this section.
    """
    section_id: int | None = Field(default=None, primary_key=True)

    article: list["Article"] = Relationship(back_populates='section')


class Newsletter(TagBase, table=True):
    """
    Database model representing a newsletter grouping articles.

    Inherits:
        TagBase: Provides 'name' and 'description' fields.

    Attributes:
        newsletter_id (Optional[int]): Primary key identifier for the newsletter (autogenerated if not provided).

    Relationships:
        article (Article): One-to-many relationship to articles linked to this newsletter.
    """
    newsletter_id: int | None = Field(default=None, primary_key=True)

    article: list["Article"] = Relationship(back_populates='newsletter')

    